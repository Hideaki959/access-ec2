AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC-ALB-EndPoint-ec2 Template."

Parameters:
#----------------------------------------------------------------#
#Common
#----------------------------------------------------------------#

 Prefix:
  Type: String
  Default: "vpc-handmaid"

#---------------------------------------------------------------#
#Network
#---------------------------------------------------------------#

 VpcCidr:
  Type: String
  Default: "10.0.0.0/16"

 PublicSubnetCidrA:
  Type: String
  Default: "10.0.0.0/24"
 PublicSubnetCidrC:
  Type: String
  Default: "10.0.1.0/24"
 PrivateSubnetCidrA:
  Type: String
  Default: "10.0.2.0/24"

 PrivateSubnetCidrC:
  Type: String
  Default: "10.0.3.0/24"

 KeyPairName:
  Type: String
  Default: "hideaki2"
#---------------------------------------------------------------#
#EC2
#---------------------------------------------------------------#

 EC2InstanceName:
  Type: String
  Default: "ec2"

 EC2InstanceAMI:
  Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  #Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64'

 EC2InstanceInstanceType:
  Type: String
  Default: "t3.micro"
 EC2InstanceVolumeType:
  Type: String
  Default: "gp2"
 EC2InstanceVolumeSize:
  Type: String
  Default: "8"

Resources:
  NewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Ref KeyPairName
      
# ------------------------------------------------------------#
#  Network
# ------------------------------------------------------------#
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-vpc

  PublicSubnetA:
   Type: AWS::EC2::Subnet
   DependsOn: InternetGatewayAttachment
   Properties:
     CidrBlock: !Ref PublicSubnetCidrA
     VpcId: !Ref Vpc
     AvailabilityZone:
      Fn::Select:
        - "0"
        - Fn::GetAZs: ""
     Tags:
      - Key: Name
        Value: !Sub ${Prefix}-public-subnet-a

  PublicSubnetC:
   Type: AWS::EC2::Subnet
   DependsOn: InternetGatewayAttachment   
   Properties:
     CidrBlock: !Ref PublicSubnetCidrC
     VpcId: !Ref Vpc
     AvailabilityZone:
      Fn::Select:
        - "1"
        - Fn::GetAZs: ""
     Tags:
      - Key: Name
        Value: !Sub ${Prefix}-public-subnet-c

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "InternetGateway"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc    
      InternetGatewayId: !Ref InternetGateway


  PublicRouteTable: 
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment    
    Properties: 
      VpcId: !Ref Vpc 
      Tags: 
        - Key: Name
          Value: !Sub "${Prefix}-public-table"
#Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetTableAssociationA: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTableAssociationC: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable


  PrivateSubnetA:
   Type: AWS::EC2::Subnet
   Properties:
     CidrBlock: !Ref PrivateSubnetCidrA
     VpcId: !Ref Vpc
     AvailabilityZone:
      Fn::Select:
        - "0"
        - Fn::GetAZs: ""
     Tags:
      - Key: Name
        Value: !Sub ${Prefix}-private-subnet-a

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetCidrC
      VpcId: !Ref Vpc
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-private-subnet-c

  PrivateRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc 
      Tags: 
        - Key: Name
          Value: !Sub "${Prefix}-private-table"

  PrivateRouteTable2: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc 
      Tags: 
        - Key: Name
          Value: !Sub "${Prefix}-private-table2"

  PrivateSubnetTableAssociationA: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetTableAssociationC: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable2

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "-"   
      GroupName: !Sub "${Prefix}-alb-sg"
      VpcId: !Ref Vpc      
      Tags:
        - Key: "Name"
          Value: !Sub "${Prefix}-alb-sg"    
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0" 

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "-"    
      GroupName: !Sub "${Prefix}-ec2-sg"
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: !Sub "${Prefix}-ec2-sg"      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "133.32.233.0/24"   #my ipv4
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"                      

  EC2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref EC2Role
      InstanceProfileName: !Sub ${AWS::StackName}-ec2-profile

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        RoleName: !Sub ${AWS::StackName}-ec2-role
        Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2-role
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  # ------------------------------------------------------------#
  #  VPC Endpoint
  # ------------------------------------------------------------#
  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds: 
        - !Ref PrivateRouteTable
        - !Ref PrivateRouteTable2        
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc 
        
  # ------------------------------------------------------------#
  #  EC2Instance
  # ------------------------------------------------------------#
  EC2Instance1:
    Type: "AWS::EC2::Instance"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-${EC2InstanceName}"
      InstanceType: !Ref EC2InstanceInstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref EC2InstanceVolumeType
            VolumeSize: !Ref EC2InstanceVolumeSize
            DeleteOnTermination: true
            Encrypted: true            
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: "true"
          GroupSet:
          - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnetA

      ImageId: !Ref EC2InstanceAMI
      KeyName: !Ref NewKeyPair # 既存のキーペア名に置き換える
      DisableApiTermination: false
      EbsOptimized: true          
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo amazon-linux-extras install nginx1
          sudo systemctl enable nginx
          sudo systemctl start nginx 

  # ------------------------------------------------------------#
  #  ALB
  # ------------------------------------------------------------#  

  ALB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Scheme: "internet-facing"           
      Name: !Sub ${Prefix}-alb
      Tags: 
        - Key: Name
          Value: !Sub ${Prefix}-alb
      IpAddressType: ipv4  
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward      
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Sub "${Prefix}-alb-tg"  
      Tags: 
        - Key: Name
          Value: !Sub "${Prefix}-alb-tg-http"        
      Port: 80      
      Protocol: HTTP
      #成功コード
      Matcher:
       HttpCode: '200,300,301'
      VpcId: !Ref Vpc  
      TargetType: instance           
      Targets: 
        - Id: !Ref EC2Instance1
